// Center block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin font-smoothing() {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin font-family($font: $font__main) {
  font-family: $font__main;
}

/**
 * Add font scale with media query as per configuration on $body-text
 * Ex: @include body-text( h1 );
 * This will add font-size and line-height with different breakpoints.
 */

@mixin body-text($level: normal, $body-text: $body-text, $device-size: false) {
  @if type-of($body-text) != "map" {
    @error "`#{$body-text}` is not a valid value for $values. It must be a list.";
  }

  $size: map_get($body-text, $level);

  @if type-of($size) == "map" {
    @if $device-size == false {
      @each $device, $values in $size {
        @if $device != "small" {
          @include mq($from: $device) {
            font-family: map_get($values, "font-family");
            font-size: map_get($values, "font-size");
            line-height: map_get($values, "line-height");
            font-weight: map-get($values, "font-weight");
            font-style: map-get($values, "font-style");
            margin-bottom: map-get($values, "margin-bottom");
            margin: map-get($values, "margin") !important;
          }
        } @else {
          font-family: map_get($values, "font-family");
          font-size: map_get($values, "font-size");
          line-height: map_get($values, "line-height");
          font-weight: map-get($values, "font-weight");
          font-style: map-get($values, "font-style");
          margin-bottom: map-get($values, "margin-bottom");
          margin: map-get($values, "margin") !important;
        }
      }
    } @else {
      $device_values: map_get($size, $device-size);

      font-family: map_get($values, "font-family");
      font-size: map_get($device_values, "font-size");
      line-height: map_get($device_values, "line-height");
      font-weight: map-get($values, "font-weight");
      font-style: map-get($values, "font-style");
      margin-bottom: map-get($values, "margin-bottom");
      margin: map-get($values, "margin") !important;
    }
  }
}

@mixin truncate($lines_to_show: 3) {
  display: -webkit-box;
  -webkit-line-clamp: $lines_to_show;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
// Media Query Mixins
//
// To be used inside of css selectors to logically group media queries.
//
// Usage example:
//
// .nav-item {
//   all global and extra small styles
//
//   @include small-screen(){
//     all small device style changes
//   }
//
//   @include medium-screen() {
//     all medium device style changes
//   }
//
//   @include large-screen() {
//     all large devices/laptops etc style changes
//   }
//
//   @include xlarge-screen() {
//     all mondo desktops and larger styles
//   }
// }
//
// Note: You rarely will need to use ALL of these media queries, just use the
// ones that are applicable
// ----------------------------------------------------------------------------

// Extra small devices (portrait phones, less than 576px)
// No media query for `xs` since this is the default in Bootstrap

// Small devices (landscape phones, 576px and up)
@mixin small-screen() {
  @media screen and (min-width: $screen-sm) {
    @content;
  }
}

// Medium devices (tablets, 768px and up)
@mixin medium-screen() {
  @media screen and (min-width: $screen-md) {
    @content;
  }
}

// Large devices (desktops, 992px and up)
@mixin large-screen() {
  @media screen and (min-width: $screen-lg) {
    @content;
  }
}

// Extra large devices (large desktops, 1200px and up)
@mixin xlarge-screen() {
  @media screen and (min-width: $screen-xl) {
    @content;
  }
}

// Variable Media Query Mixins
//
// For when you need to define a specific breakpoint
//
// Usage:
//
// .nav-item {
//   normal styles
//
//   @include respond-min(1400px) {
//     styles for devices larger than 1400px
//   }
// }
// ----------------------------------------------------------------------------

// Inline media queries, Can these be removed?
@mixin respond-min($width) {
  @media screen and (min-width: $width) {
    @content;
  }
}

@mixin respond-max($width) {
  @media screen and (max-width: $width) {
    @content;
  }
}

// text color mixins
@mixin bg-text-white {
  h1,
  h4,
  h2,
  p {
    color: $light;
  }
}

@mixin bg-text-black {
  h4,
  h2,
  p {
    color: $dark;
  }
}

//Button
@mixin button {
  padding: $btn-spacing;
  border-radius: $btn-radius;
}
